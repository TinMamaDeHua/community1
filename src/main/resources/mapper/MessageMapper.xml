<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">
    <!-- 使用insert，update，delete，select标签写sql -->
    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <!--
        # 获取正常的会话列表（去除已删除的会话以及管理员的通知【from_id=1的用户就是管理员】）
        SELECT count(distinct conversation_id) from message where status != 2 and from_id != 1

        # 查询每一个会话中最新的私信，我们这里根据id来作为查询条件，当然根据创建时间也可以
        SELECT max(id) from message where status != 2 and from_id != 1 GROUP BY conversation_id
    -->
    <select id="selectConversations" resultType="Message">
        SELECT <include refid="selectFields" />
        from message
        where id in (
            SELECT max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            GROUP BY conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--
        查询当前用户的所有会话中的最新私信数量
        子查询的返回值是每个会话的最新私信id，我们要获取的总数量,所以用了count函数
    -->
    <select id="selectConversationCount" resultType="int">
        select count(m.maxId)
        from
        (
            SELECT max(id) as maxId from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            GROUP BY conversation_id
        ) as m
    </select>

    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--
        查询某个会话所包含的私信数量.
    -->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <!--
        查询当前用户（某个会话）未读的私信数量
        注意是当前用户的未读私信(status = 0)，那肯定是另一个用户发送的
    -->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <insert id="insertMessage" parameterType="Message">
        insert into message (<include refid="insertFields" /> )
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <!--  将多条消息设置为已读 -->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    <!--
        查询用户某主题中最新的那条通知
        这里要去掉删除的通知 status != 2
        当前是系统通知 from_id = 1

    -->
    <select id="selectLatestNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>
    <!--
        查询用户某主题的所有通知
    -->
    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>
    <!--
        查询用户某主题的所有未读通知
        这里注意是未读通知，status为0
        我们可以对sql增加一个判断，
        让它技能查询用户的所有通知，
        也能查询用户某主题的所有通知
    -->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset},#{limit}
    </select>

</mapper>
  