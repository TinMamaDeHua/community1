# 每个属性都有其对应的类，设置属性其实就是给类中的属性重新赋值
# ServerProperties
server.port=8081
server.servlet.context-path=/community

# ThymeleafProperties，关掉Thymeleaf的缓存，以免我们修改完数据，而页面仍然还使用之前的数据
# 但在项目上线过后，就要开启缓存，以降低数据库的压力
spring.thymeleaf.cache=false

# DataSourceProperties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&serverTimezone=Hongkong
spring.datasource.username=root
spring.datasource.password=123456
# 配置连接池 HikariDataSource是springBoot内嵌性能最好的连接池
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000

# MybatisProperties
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.nowcoder.community.entity
# 插入数据时，让主键自增
mybatis.configuration.useGeneratedKeys=true
# 让实体类字段能与数据库字段对应起来 比如 user_status userStatus
mybatis.configuration.mapUnderscoreToCamelCase=true

# logger,如果使用mybatis出现了bug，可以将日志级别调高，看到详细的错误信息， 便于调错
#logging.level.com.nowcoder.community=debug
# 如果按照当前这样的存日志方案，时间一长，日志文件会变得很臃肿，查看错误信息也变得很难
# 所以在实际开发时，我们一般是每一级别的日志有其对应的日志文件，并且日志文件到达一个大小(比如5MB)，
# 就会重新创建新的日志文件，而且日志文件也不是一直保存的，因为服务器空间有限，一般保存30天左右
#logging.file=d:/testLog/community.log

# mailProperties
spring.mail.host=smtp.sina.com
spring.mail.port=465
spring.mail.username=csy11031210@sina.com
# 这里如果使用密码报错，就使用授权码
spring.mail.password=340ec77140e31f3d
# 配置发送邮件的协议类型
spring.mail.protocol=smtps
# 使用ssl安全发送
spring.mail.properties.mail.smtp.ssl.enable=true

# community 自定义属性==》当前服务器的域名+端口
# 是给用户注册时发送链接到服务器使用 d:/work/data/upload
community.path.domain=http://localhost:8081
community.path.upload=d:/upload

# RedisProperties
spring.redis.database=11
spring.redis.host=localhost
spring.redis.port=6379

